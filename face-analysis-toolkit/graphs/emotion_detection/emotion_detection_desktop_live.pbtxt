# MediaPipe graph that performs face mesh with TensorFlow Lite on CPU.

# CPU buffer. (ImageFrame)
input_stream: "input_video"

# Output image with rendered results. (ImageFrame)
output_stream: "output_video"
# Detected faces. (std::vector<Detection>)
#output_stream: "face_detections"

# Throttles the images flowing downstream for flow control. It passes through
# the very first incoming image unaltered, and waits for downstream nodes
# (calculators and subgraphs) in the graph to finish their tasks before it
# passes through another image. All images that come in while waiting are
# dropped, limiting the number of in-flight images in most part of the graph to
# 1. This prevents the downstream nodes from queuing up incoming images and data
# excessively, which leads to increased latency and memory usage, unwanted in
# real-time mobile applications. It also eliminates unnecessarily computation,
# e.g., the output produced by a node may get dropped downstream if the
# subsequent nodes are still busy processing previous inputs.
node {
  calculator: "FlowLimiterCalculator"
  input_stream: "input_video"
  input_stream: "FINISHED:output_video"
  input_stream_info: {
    tag_index: "FINISHED"
    back_edge: true
  }
  output_stream: "throttled_input_video"
}

# extract face image
node {
    calculator: "FaceCropFromImage"
    input_stream: "IMAGE:throttled_input_video"
    output_stream: "CROP_IMAGE:face_image"
    output_stream: "DETECTIONS: face_detections"
}

node {
	calculator: "ImageTransformationCalculator"
	input_stream: "CROP_IMAGE:face_image"
	output_stream: "CROP_IMAGE:face_immage"
	node_options:{
		[type.googleapis.com/mediapipe.ImageTransformationCalculatorOptions]{
			output_width: 48
			output_height: 48
		}
	}
}

# Transforms the input image
node {
  calculator: "FaceEmotionDetection"
  input_stream: "CROP_IMAGE:face_image"
  output_stream: "DETECTIONS:emotion_detections"

}

# Performs non-max suppression to remove excessive detections.
node {
  calculator: "NonMaxSuppressionCalculator"
  input_stream: "emotion_detections"
  output_stream: "filtered_detections"
  node_options: {
    [type.googleapis.com/mediapipe.NonMaxSuppressionCalculatorOptions] {
      min_suppression_threshold: 0.4
      max_num_detections: 3
      overlap_type: INTERSECTION_OVER_UNION
      return_empty_detections: true
    }
  }
}

# Maps detection label IDs to the corresponding label text. The label map is
# provided in the label_map_path option.
node {
  calculator: "DetectionLabelIdToTextCalculator"
  input_stream: "filtered_detections"
  output_stream: "output_detections"
  node_options: {
    [type.googleapis.com/mediapipe.DetectionLabelIdToTextCalculatorOptions] {
      label_map_path: "mediapipe/models/emotion_detection_labelmap.txt"
    }
  }
}

# Converts the detections to drawing primitives for annotation overlay.
node {
  calculator: "DetectionsToRenderDataCalculator"
  input_stream: "DETECTIONS:output_detections"
  output_stream: "RENDER_DATA:render_data"
  node_options: {
    [type.googleapis.com/mediapipe.DetectionsToRenderDataCalculatorOptions] {
      thickness: 4.0
      color { r: 255 g: 0 b: 0 }
    }
  }
}

# Draws annotations and overlays them on top of the input images.
node {
  calculator: "AnnotationOverlayCalculator"
  input_stream: "IMAGE:throttled_input_video"
  input_stream: "render_data"
  output_stream: "IMAGE:output_video"
}


# # Converts the detections to drawing primitives for annotation overlay.
# node {
#   calculator: "DetectionsToRenderDataCalculator"
#   input_stream: "DETECTIONS:face_detections"
#   output_stream: "RENDER_DATA:render_data"
#   node_options: {
#     [type.googleapis.com/mediapipe.DetectionsToRenderDataCalculatorOptions] {
#       thickness: 4.0
#       color { r: 255 g: 0 b: 0 }
#     }
#   }
# }

# # Draws annotations and overlays them on top of the input images.
# node {
#   calculator: "AnnotationOverlayCalculator"
#   input_stream: "IMAGE:throttled_input_video"
#   input_stream: "render_data"
#   output_stream: "IMAGE:output_video"
# }
